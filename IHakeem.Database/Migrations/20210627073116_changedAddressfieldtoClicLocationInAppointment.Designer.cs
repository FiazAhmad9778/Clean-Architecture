// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iHakeem.Database.AppDbContext;

namespace iHakeem.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210627073116_changedAddressfieldtoClicLocationInAppointment")]
    partial class changedAddressfieldtoClicLocationInAppointment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TitleId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("Date");

                    b.Property<string>("AppointmentStatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("Time");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("Time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Categories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Culture", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Code");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.CurrentMedication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AsNeeded")
                        .HasColumnType("bit");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("DoctorNumber")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("Dose")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("DoseFrequentId")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MedicineId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Note")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("PharmacyNumber")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("ReasonForTakingMedicine")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("CurrentMedication");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DetailPregnancies", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("DeliveryTypeId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("GenderId")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("NumberOfAbortions")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("NumberOfLivingChildrens")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("NumberOfMiscarriages")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("NumberOfPregnancies")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("DetailPregnancies");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HomePhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaritialStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyIntroduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeCountry")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("MaritialStatusId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorAwardsAndRecognition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAwardsAndRecognition");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("DegreeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("EducationTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Majors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EducationTypeId");

                    b.ToTable("DoctorEducation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorLicenseAndCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<DateTime>("DateOfExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseOrCertificateNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LicenseOrCertificateTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LicenseOrCertificateTypeId");

                    b.ToTable("DoctorLicenseAndCertification");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<bool>("CurrentlyMember")
                        .HasColumnType("bit");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorMembership");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("DurationAssociated")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RelationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RelationId");

                    b.ToTable("DoctorReference");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorService");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorSkillsAndTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("EducationTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("SuperVisor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperVisorContact")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EducationTypeId");

                    b.ToTable("DoctorSkillsAndTraining");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorSocialInfo", b =>
                {
                    b.Property<int>("SocialInformationId")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SocialInformationId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SocialInformationId")
                        .IsUnique();

                    b.ToTable("DoctorSocialInfo");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorWorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("ISCurrentlyWorking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("SuperVisor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SuperVisorContact")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorWorkExperience");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ExerciseHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("HobbiesOrActivitiesNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExercise")
                        .HasColumnType("bit");

                    b.Property<long?>("NumberOfDaysPerWeek")
                        .HasColumnType("BIGINT");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ExerciseHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeBytes")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.HospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("HospitaliazationYear")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("HospitalizaitonNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("ReasonId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .HasColumnType("NVARCHAR(500)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("HospitalizationInformation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Localization", b =>
                {
                    b.Property<int>("LocalizationSetId")
                        .HasColumnType("int");

                    b.Property<string>("CultureCode")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LocalizationSetId", "CultureCode");

                    b.HasIndex("CultureCode");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.LocalizationSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("LocalizationSets");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.LookupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupData");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.MedicalDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId")
                        .IsUnique();

                    b.HasIndex("NameId")
                        .IsUnique();

                    b.ToTable("MedicalDepartments");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.MyPhysicians", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hospital")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("PhysicianLocation")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("PhysicianName")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("PhysicianNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("PhysicianPhoneNo")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("PhysicianSpecialityId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MyPhysicians");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EthnicityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaritialStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreferedLanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("MaritialStatusId");

                    b.HasIndex("PreferedLanguageId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientAllergiesHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllergyNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("AllergyTo")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergiesHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientBloodPressure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BloodPressureDateAndTime")
                        .HasColumnType("DateTime");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Diastolic")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("Systolic")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientBloodPressure");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientEmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelationId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelationId1");

                    b.ToTable("PatientEmergencyContact");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientFamilyHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeceasedOrDeathAge")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalConditionsOrCauseOfDeath")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("Note")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("RelationId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFamilyHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientGaurdian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("HomeContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelationId");

                    b.ToTable("PatientGaurdian");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientHobbiesHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hobby")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHobbiesHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientMedicalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiseaseId")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicalHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientSocialInfo", b =>
                {
                    b.Property<int>("SocialInformationId")
                        .HasColumnType("int");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SocialInformationId", "PatientId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SocialInformationId")
                        .IsUnique();

                    b.ToTable("PatientSocialInfo");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientTemperature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("PatientTemperatureDateAndTime")
                        .HasColumnType("DateTime");

                    b.Property<double>("Temperature")
                        .HasColumnType("FLOAT");

                    b.Property<long>("UnitId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientTemperature");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientWeight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("PatientWeightDateAndTime")
                        .HasColumnType("DateTime");

                    b.Property<long>("UnitId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("FLOAT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientWeight");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PharmacyInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CityId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("CountryId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("PharmacyAddress")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("StateId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PharmacyInformation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PregnanciesHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgeAtFirstMenses")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("AgeAtMenopause")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("BreastExam")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoYouUseContraceptionId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("GynaecologicalConditionsOrProblems")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("HotFlashesOrOtherSymptoms")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KindOfContraception")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("Mammogram")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("MenstrualPeriods")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("PapSmear")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PregnanciesHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PulseOximeter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BloodOxygen")
                        .HasColumnType("FLOAT");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("PulseOximeterDateAndTime")
                        .HasColumnType("DateTime");

                    b.Property<double>("PulseRate")
                        .HasColumnType("FLOAT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PulseOximeter");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.RecreationalDrugsHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AmountPerWeek")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DrugId")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUsed")
                        .HasColumnType("BIGINT");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("RecreationalDrugsHistoryNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("RecreationalDrugsHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.SocialHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlcoholId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("AlcoholNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("AmountPerDay")
                        .HasColumnType("BIGINT");

                    b.Property<long>("CaffeineId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("CaffeineNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDepressedAndHopeless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInterestedOrPleasure")
                        .HasColumnType("bit");

                    b.Property<string>("NumberOfCaffeinatedDrinksPerDay")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("NumberOfDrinksPerWeek")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("NumberOfYears")
                        .HasColumnType("BIGINT");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("PreferredDrink")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<long?>("QuitYear")
                        .HasColumnType("BIGINT");

                    b.Property<long>("QuitYearAlcohal")
                        .HasColumnType("BIGINT");

                    b.Property<long>("SmokingId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("SmokingNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("TobaccoTypeId")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SocialHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.SocialInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SocialInfo");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.SurgicalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("SurgeonName")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("SurgeryNotes")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("SurgeryType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<long?>("SurgeryYear")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SurgicalHistory");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.UserPhotoAttachment", b =>
                {
                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("FileId", "UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhotoAttachment");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.UserVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserVerificationCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LookupData", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Gender");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Appointment", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LookupData", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusId")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.Appointment", "DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.Patient", "Patient")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.Appointment", "PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AppointmentStatus");

                    b.Navigation("AppointmentType");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.CurrentMedication", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("CurrentMedication")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DetailPregnancies", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("DetailPregnancies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Doctor", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LookupData", "MaritialStatus")
                        .WithMany()
                        .HasForeignKey("MaritialStatusId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaritialStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorAwardsAndRecognition", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorAwardsAndRecognition")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorEducation", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorEducation")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "EducationType")
                        .WithMany()
                        .HasForeignKey("EducationTypeId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Doctor");

                    b.Navigation("EducationType");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorLicenseAndCertification", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorLicenseAndCertification")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "LicenseOrCertificateType")
                        .WithMany()
                        .HasForeignKey("LicenseOrCertificateTypeId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Doctor");

                    b.Navigation("LicenseOrCertificateType");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorMembership", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorMembership")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorReference", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorReference")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Doctor");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorService", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LookupData", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorSkillsAndTraining", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorSkillsAndTraining")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "EducationType")
                        .WithMany()
                        .HasForeignKey("EducationTypeId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Doctor");

                    b.Navigation("EducationType");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorSocialInfo", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("SocialInformation")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.SocialInfo", "SocialInformation")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.DoctorSocialInfo", "SocialInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("SocialInformation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.DoctorWorkExperience", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorWorkExperience")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ExerciseHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("ExerciseHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.HospitalizationInformation", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("HospitalizationInformation")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Localization", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LocalizationSet", "LocalizationSet")
                        .WithMany("Localizations")
                        .HasForeignKey("LocalizationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("LocalizationSet");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.LookupData", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Lookup", "Lookup")
                        .WithMany("LookupData")
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.MedicalDepartment", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LocalizationSet", "Description")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.MedicalDepartment", "DescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LocalizationSet", "Name")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.MedicalDepartment", "NameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.MyPhysicians", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("MyPhysicians")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Patient", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.LookupData", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "MaritialStatus")
                        .WithMany()
                        .HasForeignKey("MaritialStatusId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "PreferedLanguage")
                        .WithMany()
                        .HasForeignKey("PreferedLanguageId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.LookupData", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .HasPrincipalKey("Code");

                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Ethnicity");

                    b.Navigation("MaritialStatus");

                    b.Navigation("PreferedLanguage");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientAllergiesHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientAllergiesHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientBloodPressure", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientBloodPressure")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientEmergencyContact", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "Patient")
                        .WithMany("EmergencyContact")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId1");

                    b.Navigation("Patient");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientFamilyHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientGaurdian", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "Patient")
                        .WithMany("Gaurdian")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.LookupData", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .HasPrincipalKey("Code");

                    b.Navigation("Patient");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientHobbiesHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientHobbiesHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientMedicalHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientSocialInfo", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "Patient")
                        .WithMany("SocialInformation")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.SocialInfo", "SocialInformation")
                        .WithOne()
                        .HasForeignKey("iHakeem.Domain.Models.PatientSocialInfo", "SocialInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SocialInformation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientTemperature", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientTemperature")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PatientWeight", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PatientWeight")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PharmacyInformation", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PharmacyInformation")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PregnanciesHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PregnanciesHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.PulseOximeter", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("PulseOximeter")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.RecreationalDrugsHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("RecreationalDrugsHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.SocialHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("SocialHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.SurgicalHistory", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.Patient", "PatientDetails")
                        .WithMany("SurgicalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.UserPhotoAttachment", b =>
                {
                    b.HasOne("iHakeem.Domain.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iHakeem.Domain.Models.ApplicationUser", null)
                        .WithOne("Photo")
                        .HasForeignKey("iHakeem.Domain.Models.UserPhotoAttachment", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Doctor", b =>
                {
                    b.Navigation("DoctorAwardsAndRecognition");

                    b.Navigation("DoctorEducation");

                    b.Navigation("DoctorLicenseAndCertification");

                    b.Navigation("DoctorMembership");

                    b.Navigation("DoctorReference");

                    b.Navigation("DoctorSkillsAndTraining");

                    b.Navigation("DoctorWorkExperience");

                    b.Navigation("SocialInformation");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.LocalizationSet", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Lookup", b =>
                {
                    b.Navigation("LookupData");
                });

            modelBuilder.Entity("iHakeem.Domain.Models.Patient", b =>
                {
                    b.Navigation("CurrentMedication");

                    b.Navigation("DetailPregnancies");

                    b.Navigation("EmergencyContact");

                    b.Navigation("ExerciseHistory");

                    b.Navigation("Gaurdian");

                    b.Navigation("HospitalizationInformation");

                    b.Navigation("MyPhysicians");

                    b.Navigation("PatientAllergiesHistory");

                    b.Navigation("PatientBloodPressure");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientHobbiesHistory");

                    b.Navigation("PatientMedicalHistory");

                    b.Navigation("PatientTemperature");

                    b.Navigation("PatientWeight");

                    b.Navigation("PharmacyInformation");

                    b.Navigation("PregnanciesHistory");

                    b.Navigation("PulseOximeter");

                    b.Navigation("RecreationalDrugsHistory");

                    b.Navigation("SocialHistory");

                    b.Navigation("SocialInformation");

                    b.Navigation("SurgicalHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
